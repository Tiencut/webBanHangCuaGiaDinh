package com.giadinh.banphutung.web_ban_hang_gia_dinh.controller;

import java.io.IOException;
import java.time.LocalDate;
import java.util.HashMap;
import java.util.Map;

import org.springframework.core.io.ByteArrayResource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.giadinh.banphutung.web_ban_hang_gia_dinh.service.ExcelImportService;
import com.giadinh.banphutung.web_ban_hang_gia_dinh.service.ExcelTemplateService;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

/**
 * ExcelImportController - API endpoints cho import d·ªØ li·ªáu t·ª´ Excel
 */
@RestController
@RequestMapping("/api/import")
@RequiredArgsConstructor
@Slf4j
public class ExcelImportController {

    private final ExcelImportService excelImportService;
    private final ExcelTemplateService excelTemplateService;

    /**
     * Import d·ªØ li·ªáu t·ª´ file Excel t·ªïng h·ª£p
     */
    @PostMapping("/excel")
    public ResponseEntity<Map<String, Object>> importFromExcel(
            @RequestParam("file") MultipartFile file) {
        
        Map<String, Object> response = new HashMap<>();
        
        try {
            // Validate file
            if (file.isEmpty()) {
                response.put("success", false);
                response.put("message", "File kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng");
                return ResponseEntity.badRequest().body(response);
            }

            String filename = file.getOriginalFilename();
            if (filename == null || !filename.toLowerCase().endsWith(".xlsx")) {
                response.put("success", false);
                response.put("message", "Ch·ªâ h·ªó tr·ª£ file .xlsx");
                return ResponseEntity.badRequest().body(response);
            }

            log.info("üì• Nh·∫≠n file import: {} ({}KB)", filename, file.getSize() / 1024);

            // Import data
            ExcelImportService.ImportResult result = excelImportService.importFromExcel(file);

            response.put("success", result.isSuccess());
            response.put("summary", result.getSummary());
            response.put("successes", result.getSuccesses());
            response.put("warnings", result.getWarnings());
            response.put("errors", result.getErrors());
            response.put("importTime", result.getImportTime());

            HttpStatus status = result.hasErrors() ? HttpStatus.PARTIAL_CONTENT : HttpStatus.OK;
            return ResponseEntity.status(status).body(response);

        } catch (IOException e) {
            log.error("‚ùå L·ªói ƒë·ªçc file: {}", e.getMessage(), e);
            response.put("success", false);
            response.put("message", "L·ªói ƒë·ªçc file: " + e.getMessage());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(response);
        } catch (RuntimeException e) {
            log.error("‚ùå L·ªói x·ª≠ l√Ω d·ªØ li·ªáu: {}", e.getMessage(), e);
            response.put("success", false);
            response.put("message", "L·ªói x·ª≠ l√Ω d·ªØ li·ªáu: " + e.getMessage());
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(response);
        }
    }

    /**
     * Download template Excel ƒë·ªÉ import
     */
    @GetMapping("/template")
    public ResponseEntity<ByteArrayResource> downloadTemplate() {
        try {
            log.info("üì• Request download template Excel");
            
            ByteArrayResource template = excelTemplateService.generateTemplate();
            
            String filename = "template-import-data-" + LocalDate.now() + ".xlsx";
            
            return ResponseEntity.ok()
                    .header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=\"" + filename + "\"")
                    .contentType(MediaType.APPLICATION_OCTET_STREAM)
                    .contentLength(template.contentLength())
                    .body(template);
                    
        } catch (IOException | RuntimeException e) {
            log.error("‚ùå L·ªói t·∫°o template: {}", e.getMessage(), e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }

    /**
     * L·∫•y th√¥ng tin v·ªÅ template (kh√¥ng download file)
     */
    @GetMapping("/template/info")
    public ResponseEntity<Map<String, Object>> getTemplateInfo() {
        Map<String, Object> response = new HashMap<>();
        
        response.put("title", "Template Import D·ªØ Li·ªáu");
        response.put("description", "File Excel m·∫´u ƒë·ªÉ import d·ªØ li·ªáu v√†o h·ªá th·ªëng");
        response.put("fileFormat", ".xlsx (Excel 2007+)");
        response.put("downloadUrl", "/api/import/template");
        response.put("sheets", new String[]{
            "Categories - Danh m·ª•c s·∫£n ph·∫©m", 
            "Suppliers - Nh√† cung c·∫•p", 
            "VehicleModels - M·∫´u xe", 
            "Products - S·∫£n ph·∫©m", 
            "Customers - Kh√°ch h√†ng", 
            "TrainingContent - N·ªôi dung ƒë√†o t·∫°o"
        });
        
        return ResponseEntity.ok(response);
    }

    /**
     * L·∫•y h∆∞·ªõng d·∫´n format Excel
     */
    @GetMapping("/guide")
    public ResponseEntity<Map<String, Object>> getImportGuide() {
        Map<String, Object> response = new HashMap<>();
        
        response.put("title", "H∆∞·ªõng d·∫´n import d·ªØ li·ªáu t·ª´ Excel");
        response.put("fileFormat", ".xlsx (Excel 2007+)");
        response.put("maxSize", "10MB");
        
        Map<String, Object> sheets = new HashMap<>();
        
        // Categories sheet
        Map<String, Object> categoriesSheet = new HashMap<>();
        categoriesSheet.put("description", "Danh m·ª•c s·∫£n ph·∫©m");
        categoriesSheet.put("columns", new String[]{
            "Code (M√£ danh m·ª•c)", "Name (T√™n danh m·ª•c)", 
            "Description (M√¥ t·∫£)", "Parent Code (M√£ danh m·ª•c cha)"
        });
        categoriesSheet.put("example", new String[]{
            "ENGINE", "Ph·ª• t√πng ƒë·ªông c∆°", "C√°c b·ªô ph·∫≠n c·ªßa ƒë·ªông c∆°", ""
        });
        sheets.put("Categories", categoriesSheet);

        // Suppliers sheet
        Map<String, Object> suppliersSheet = new HashMap<>();
        suppliersSheet.put("description", "Nh√† cung c·∫•p");
        suppliersSheet.put("columns", new String[]{
            "Code (M√£ NCC)", "Name (T√™n NCC)", "Address (ƒê·ªãa ch·ªâ)", 
            "Phone (ƒêi·ªán tho·∫°i)", "Email", "Contact Person (Ng∆∞·ªùi li√™n h·ªá)", "Tax Code (M√£ s·ªë thu·∫ø)"
        });
        suppliersSheet.put("example", new String[]{
            "ISUZU", "Isuzu Vietnam", "HCM", "028-123456", "info@isuzu.vn", "Nguy·ªÖn VƒÉn A", "0123456789"
        });
        sheets.put("Suppliers", suppliersSheet);

        // VehicleModels sheet
        Map<String, Object> vehicleSheet = new HashMap<>();
        vehicleSheet.put("description", "M·∫´u xe");
        vehicleSheet.put("columns", new String[]{
            "Code (M√£ xe)", "Name (T√™n xe)", "Brand (Th∆∞∆°ng hi·ªáu)", 
            "Year From (NƒÉm b·∫Øt ƒë·∫ßu)", "Year To (NƒÉm k·∫øt th√∫c)", "Tonnage (T·∫£i tr·ªçng)", 
            "Engine Model (ƒê·ªông c∆°)", "Transmission (H·ªôp s·ªë)", "Vehicle Type (Lo·∫°i xe)"
        });
        vehicleSheet.put("example", new String[]{
            "HD65", "Hyundai HD65", "HYUNDAI", "2015", "2020", "3.5", "D4BB", "5 c·∫•p s·ªë", "LIGHT_TRUCK"
        });
        vehicleSheet.put("vehicleTypes", new String[]{
            "LIGHT_TRUCK", "MEDIUM_TRUCK", "HEAVY_TRUCK", "PICKUP", "VAN", "BUS", "SPECIALIZED"
        });
        sheets.put("VehicleModels", vehicleSheet);

        // Products sheet
        Map<String, Object> productsSheet = new HashMap<>();
        productsSheet.put("description", "S·∫£n ph·∫©m");
        productsSheet.put("columns", new String[]{
            "Code (M√£ SP)", "Name (T√™n SP)", "Description (M√¥ t·∫£)", 
            "Category Code (M√£ danh m·ª•c)", "Base Price (Gi√° g·ªëc)", "Selling Price (Gi√° b√°n)", 
            "Brand (Th∆∞∆°ng hi·ªáu)", "Part Number (M√£ ph·ª• t√πng)", "OEM Number (M√£ OEM)", 
            "Compatible Vehicles (Xe t∆∞∆°ng th√≠ch - c√°ch nhau b·ªüi d·∫•u ph·∫©y)"
        });
        productsSheet.put("example", new String[]{
            "BP-HD65-001", "M√° phanh Hyundai HD65", "M√° phanh tr∆∞·ªõc cho HD65", 
            "BRAKE", "250000", "280000", "Sangsin", "58101-5H000", "58101-5H000", "HD65,HD72"
        });
        sheets.put("Products", productsSheet);

        // Customers sheet
        Map<String, Object> customersSheet = new HashMap<>();
        customersSheet.put("description", "Kh√°ch h√†ng");
        customersSheet.put("columns", new String[]{
            "Code (M√£ KH)", "Name (T√™n KH)", "Phone (ƒêi·ªán tho·∫°i)", 
            "Email", "Address (ƒê·ªãa ch·ªâ)", "Tax Code (M√£ s·ªë thu·∫ø)", "Customer Type (Lo·∫°i KH)"
        });
        customersSheet.put("example", new String[]{
            "KH001", "Nguy·ªÖn VƒÉn A", "0909123456", "nguyenvana@email.com", 
            "123 ABC, HCM", "0123456789", "INDIVIDUAL"
        });
        customersSheet.put("customerTypes", new String[]{
            "INDIVIDUAL", "BUSINESS", "GOVERNMENT", "VIP"
        });
        sheets.put("Customers", customersSheet);

        // TrainingContent sheet
        Map<String, Object> trainingSheet = new HashMap<>();
        trainingSheet.put("description", "N·ªôi dung ƒë√†o t·∫°o");
        trainingSheet.put("columns", new String[]{
            "Title (Ti√™u ƒë·ªÅ)", "Category (Danh m·ª•c)", "Summary (T√≥m t·∫Øt)", 
            "Content (N·ªôi dung HTML)", "Priority (ƒê·ªô ∆∞u ti√™n 1-3)", 
            "Read Time (Th·ªùi gian ƒë·ªçc - ph√∫t)", "Tags (T·ª´ kh√≥a - c√°ch nhau b·ªüi d·∫•u ph·∫©y)", 
            "Show In Quick Help (true/false)"
        });
        trainingSheet.put("example", new String[]{
            "C√°ch nh·∫≠n di·ªán m√° phanh HD65", "PRODUCT_IDENTIFICATION", 
            "H∆∞·ªõng d·∫´n ph√¢n bi·ªát m√° phanh ch√≠nh h√£ng", 
            "<h4>M√° phanh HD65</h4><p>OEM: 58101-5H000</p>", 
            "1", "3", "hyundai,brake,hd65", "true"
        });
        trainingSheet.put("categories", new String[]{
            "PRODUCT_IDENTIFICATION", "VEHICLE_KNOWLEDGE", "SALES_TIPS", 
            "TECHNICAL_SPECS", "COMMON_MISTAKES", "QUALITY_CHECK", 
            "CUSTOMER_SERVICE", "PRICING_GUIDE"
        });
        sheets.put("TrainingContent", trainingSheet);

        response.put("sheets", sheets);
        
        return ResponseEntity.ok(response);
    }
}
